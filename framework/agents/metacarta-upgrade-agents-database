#!/usr/bin/python

# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements. See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License. You may obtain a copy of the License at
# 
# http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.#
# IF YOU ARE READING THIS, YOU ARE VIOLATING YOUR LICENSE AGREEMENT.
# $Id$

import os
import sys
import subprocess

def invoke_script( parameters, input=None ):
    """ Execute a script, returning the return code, standard output, and standard error """
    program = subprocess.Popen(parameters,
                               stdin=subprocess.PIPE,
                               stdout=subprocess.PIPE,
                               stderr=subprocess.PIPE)
    (outputtext, errortext) = program.communicate(input)
    retcode = program.wait()
    return (retcode,outputtext,errortext)
    
def get_lines_with_text( input ):
    """ Convert the input into text lines and ditch the one at the end (which is always blank)
    """
    rval = input.splitlines()
    if len(rval) == 0:
        return rval
    return rval[0:len(rval)-1]

def dbcreate( ):
    """ Create the database and the proper database user, unless they already exist """
    # Check first, because otherwise the log gets written to
    (rcode, stdout, stderr) = invoke_script( [ "su", "postgres", "-p", "-s", "/bin/sh", "-c", "psql -q -t -U postgres -c \"SELECT * FROM pg_user WHERE usename='metacarta';\"" ] )
    if rcode != 0:
        raise Exception("Unexpected error occurred checking for user 'metacarta': %d (%s)" % (rcode,stderr))
    results = get_lines_with_text(stdout)
    if len(results) == 0:
        (rcode, stdout, stderr) = invoke_script( [ "su", "postgres", "-p", "-s", "/bin/sh", "-c", "psql -q -t -U postgres -c \"CREATE USER metacarta PASSWORD 'local_pg_passwd';\"" ] )
        sys.stdout.write(stdout)
        if rcode != 0:
            raise Exception("Unexpected error occurred creating 'metacarta' database user: %d (%s)" % (rcode,stderr))
    # Check for database existing for the same reason
    (rcode, stdout, stderr) = invoke_script( [ "su", "postgres", "-p", "-s", "/bin/sh", "-c", "psql -q -t -U postgres -c \"SELECT * FROM pg_database WHERE datname='metacarta';\"" ] )
    if rcode != 0:
        raise Exception("Unexpected error occurred checking for database 'metacarta': %d (%s)" % (rcode,stderr))
    results = get_lines_with_text(stdout)
    if len(results) == 0:
        (rcode, stdout, stderr) = invoke_script( [ "su", "postgres", "-p", "-s", "/bin/sh", "-c", "psql -q -t -U postgres -c \"CREATE DATABASE metacarta OWNER=metacarta ENCODING='utf8';\"" ] )
        sys.stdout.write(stdout)
        if rcode != 0:
            raise Exception("Unexpected error occurred creating 'metacarta' database: %d (%s)" % (rcode,stderr))

def restore_database( database_image_name ):
    """ Restore database from a specified dump file """
    """ if su -p -s /bin/sh postgres -c "/usr/bin/pg_restore --cluster 8.3/agents -d metacarta --disable-triggers --format=c -U postgres /common/postgresql-agents.dbdump" ; then """
    (rcode, stdout, stderr) = invoke_script( [ "su", "-p", "-s", "/bin/sh", "postgres", "-c", "/usr/bin/pg_restore --cluster 8.3/agents -d metacarta --disable-triggers --format=c -U postgres %s" % database_image_name ] )
    sys.stdout.write(stdout)
    if rcode != 0:
        raise Exception("Error occurred restoring database: %d (%s)" % (rcode, stderr) )

if __name__ == '__main__':
    if len(sys.argv) != 2:
        print >> sys.stderr, "Usage: %s (start | stop | restart)" % sys.argv[0]
        sys.exit(2)
    if sys.argv[1] == "start":
        try:
            dbcreate()
            # Now, import old database, if there is one sitting around in the
            # proper location
            if os.path.exists("/common/postgresql-agents.dbdump"):
                restore_database("/common/postgresql-agents.dbdump")
                # Restoration successful, so clean up old image
                os.unlink("/common/postgresql-agents.dbdump")
        except Exception, e:
            print >> sys.stderr, str(e)
            sys.exit(1)
    elif sys.argv[1] == "stop":
        pass
    elif sys.argv[1] == "restart":
        pass
    else:
        print >> sys.stderr, "Usage: %s (start | stop | restart)" % sys.argv[0]
        sys.exit(2)
